on:
  push:
    branches:
      - master

name: Default pipeline

jobs:
  dynamodb_table:
    runs-on: ubuntu-latest
    container: mesosphere/aws-cli:latest
    env:
      DYNAMODB_TABLE: ${{ secrets.STATE_NAME }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
    steps:
      - name: Check for existence and create
        run: |
          aws dynamodb describe-table --table-name ${DYNAMODB_TABLE} || (
            aws dynamodb create-table \
              --attribute-definitions AttributeName=LockID,AttributeType=S \
              --table-name ${DYNAMODB_TABLE} \
              --key-schema AttributeName=LockID,KeyType=HASH \
              --provisioned-throughput WriteCapacityUnits=20,ReadCapacityUnits=20
          )
  s3_bucket:
    runs-on: ubuntu-latest
    container: mesosphere/aws-cli:latest
    env:
      S3_BUCKET: ${{ secrets.STATE_NAME }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
    steps:
      - name: Check for existence and create
        run: |
            aws s3api list-objects --bucket ${S3_BUCKET} || (
              aws s3api create-bucket \
                --bucket ${S3_BUCKET};
              aws s3api put-bucket-versioning \
                --bucket ${S3_BUCKET} \
                --versioning-configuration Status=Enabled
            )
  repository:
    runs-on: ubuntu-latest
    container: mesosphere/aws-cli:latest
    env:
      ECR_REPOSITORY: graphic-counter
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
    steps:
      - name: Check for existence and create
        run: |
          aws ecr describe-repositories --repository-names ${ECR_REPOSITORY} || aws ecr create-repository --repository-name ${ECR_REPOSITORY}
  image:
    needs: [repository]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: graphic-counter
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./docker
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
  terraform:
    runs-on: ubuntu-latest
    needs: [dynamodb_table, s3_bucket, image]
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
    steps:
      - name: "Checkout"
        uses: actions/checkout@master
      - name: "Terraform Format"
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: 0.12.13
          tf_actions_subcommand: "fmt"
          tf_actions_working_dir: "terraform"
          tf_actions_comment: true
      - name: 'Terraform Init'
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: 0.12.13
          tf_actions_subcommand: 'init'
          tf_actions_working_dir: "terraform"
          tf_actions_comment: true
          args: '-backend-config="dynamodb_table=${{ secrets.STATE_NAME }}" -backend-config="bucket=${{ secrets.STATE_NAME }}" -backend-config="region=${{ secrets.AWS_REGION }}"'
      - name: "Terraform Validate"
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: 0.12.13
          tf_actions_subcommand: "validate"
          tf_actions_working_dir: "terraform"
          tf_actions_comment: true
        env:
          TF_VAR_db_pass: ${{ secrets.DB_PASS }}
          TF_VAR_tag: ${{ github.sha }}
          TF_VAR_repo: ${{ github.repository }}
      - name: "Terraform Plan"
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: 0.12.13
          tf_actions_subcommand: "plan"
          tf_actions_working_dir: "terraform"
          tf_actions_comment: true
        env:
          TF_VAR_db_pass: ${{ secrets.DB_PASS }}
          TF_VAR_tag: ${{ github.sha }}
          TF_VAR_repo: ${{ github.repository }}
      - name: "Terraform Apply"
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: 0.12.13
          tf_actions_subcommand: "apply"
          tf_actions_working_dir: "terraform"
          tf_actions_comment: true
        env:
          TF_VAR_db_pass: ${{ secrets.DB_PASS }}
          TF_VAR_tag: ${{ github.sha }}
